1. The `chat.completions.create` method sends a list of messages to the OpenAI API and requests a model (like `gpt-4o`) to generate the next message in the conversation, acting like a chatbot.
2. `completion.choices[0].message.content` accesses the actual text response generated by the model, because the API can return multiple choices (completions), and the response is nested in that structure.
3. useCollection listens to a Firestore query (usually a collection or a filtered version of a collection) and returns:

1.The snapshot of the documents

2.A loading state

3.An error state (if any)

‚úÖ Syntax
const [value, loading, error] = useCollection(query, options);
üî∏ Parameters
query (required):
A Query object from Firebase Firestore. This defines which collection or filtered data you want to listen to.

options (optional):
An object that can include:
snapshotListenOptions: An object passed to onSnapshot(), e.g., { includeMetadataChanges: true }
idField: A string that, if provided, will include the document ID as a field in the returned data (e.g., "id").
refField: A string that, if provided, will include the document ref as a field in the returned data (e.g., "ref").

üîÅ Return Values
const [value, loading, error] = useCollection(query, options);
value: QuerySnapshot<DocumentData> ‚Äî contains docs, metadata, etc.
loading: boolean
error: Error | undefined

***** See Sidebar component useCollection part 
This code subscribes to a Firestore subcollection:/users/{current_user_email}/chats
It will return all chat documents
Sorted by createdAt (oldest first)
It automatically updates the UI in real-time if any new chats are added
session &&	Prevents running the query if the user is not logged in


